head(x)
ccccccc
starting.map
x
c
x[:5]
x[1:5]
"
"asdfsd
"fasdfsa"
at = "fasdfsa"
at
at
at[1]
at[[1]]
substring(at, 1, 2)
substring(x, 1, 5)
substring(x, 1,5)
substring(x, 1,5)
substring(x, 1, 10)
substring(y, 1, 10)
substring(x, 1, 10)
substring(y, 1, 10)
decrypted.text
substring(x, 1, 5)
substring(y 1, 5)
substring(y, 1, 5)
starting.map
letters
iterations = 1000
iterations % (iterations/10)
iterations %% (iterations/10)
decrypted.text
decrypted.text$scores
plot(decrypted.text$scores)
asdf <- rep(NA, 5)
asdf
asdf[1]
asdf[1] = "ellgeg eg gerg erg ggg gerge rg ergegr"
asdf
RunMcmcDecipher <- function(to.decipher,
                            p = 1,
                            iterations = 2000,
                            start.map = sample(toupper(letters))) {
    ## Uses the Metropolis algorithm to decrypt a simple substitution cipher
    ##
    ## Args:
    ##   to_decipher: the text to decrypt
    ##   p: scaling (tempering) parameter
    ##   iterations: number of iterations to run for MCMC
    ##   start.map: letter mapping to start with. Random by default
    ##
    ## Returns:
    ##   a list object containing:
    ##     - The decrypted text (if successful)
    ##     - Mapping used for the decryption
    ##     - table of scores

    current.mapping  <- start.map
    current.decipher <- CipherText(to.decipher, current.mapping)
    current.score    <- CalcScore(to.decipher, current.mapping)

    max.decipher <- current.decipher
    max.score    <- current.score

    ## To keep track of all scores
    all.scores <- rep(NA, iterations)
    text.history <- rep(NA, iterations)
    num.accept <- 0

    i <- 1

    while(i <= iterations) {

        ## Randomly switch 2 letters in the mapping
        proposal <- sample(1:26, 2)
        prop.mapping <- current.mapping
        prop.mapping[proposal[1]] <- current.mapping[proposal[2]]
        prop.mapping[proposal[2]] <- current.mapping[proposal[1]]

        ## Calculate score using new mapping
        prop.score <- CalcScore(to.decipher, prop.mapping)

        if(log(runif(1)) < p*(prop.score - current.score)) {

            ## If new mapping is accepted, update current variables
            current.mapping  <- prop.mapping
            current.score    <- prop.score
            current.decipher <- CipherText(to.decipher, current.mapping)

            ## If new score is higher than previous max score, update.
            if(current.score > max.score) {
                max.score   <- current.score
                max.mapping <- current.mapping
            }

            ## Increment number of accepted
            num.accept <- num.accept + 1
        }

        if (i %% (iterations/100) == 0) {
            cat(i, substring(current.decipher,1,70), current.score, '\n')
        }

        all.scores[i]   <- current.score
        text.history[i] <- substring(current.decipher, 1, 70)

        i <- i + 1
    }

    ret <- list(max.score = max.score,
                max.mapping = max.mapping,
                scores = all.scores,
                num.accept= num.accept)

    return(ret)
}
decrypted.text
source('functions.R')
decrypted.text
substring(x, 1, 70)
substring(x, 1, 60)
substring(x, 1, 55)
substring(x, 1, 58)
substring(x, 1, 57)
